// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  DISPATCHER
  USER
  CARRIER
}

// Carrier model
model Carrier {
  id                   Int                      @id @default(autoincrement())
  name                 String
  contactPerson        String?
  phone                String?
  email                String?
  mcNumber             String?                  @unique
  dotNumber            String?                  @unique
  insuranceExpiration  DateTime?
  status               CarrierStatus            @default(PENDING)
  rating               Decimal?                 @db.Decimal(2, 1)
  ratePerMile          Decimal?                 @db.Decimal(5, 2)
  onboardingComplete   Boolean                  @default(false)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt

  // Relations
  bookings             Booking[]
  preferredRoutes      CarrierPreferredRoute[]
  documents            CarrierDocument[]

  @@map("carriers")
}

enum CarrierStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Route model
model Route {
  id            Int                      @id @default(autoincrement())
  name          String
  origin        String
  destination   String
  distance      Int
  standardRate  Decimal                  @db.Decimal(5, 2)
  frequency     String?
  departureTime DateTime?                @db.Time()
  arrivalTime   DateTime?                @db.Time()
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  // Relations
  bookings      Booking[]
  preferredBy   CarrierPreferredRoute[]

  @@map("routes")
}

// Booking model
model Booking {
  id          Int           @id @default(autoincrement())
  carrierId   Int
  routeId     Int
  bookingDate DateTime
  rate        Decimal       @db.Decimal(8, 2)
  status      BookingStatus @default(PENDING)
  billable    Boolean       @default(false)
  notes       String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  carrier     Carrier       @relation(fields: [carrierId], references: [id])
  route       Route         @relation(fields: [routeId], references: [id])
  invoice     Invoice?

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Carrier Preferred Routes (many-to-many)
model CarrierPreferredRoute {
  carrierId Int
  routeId   Int
  carrier   Carrier @relation(fields: [carrierId], references: [id], onDelete: Cascade)
  route     Route   @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@id([carrierId, routeId])
  @@map("carrier_preferred_routes")
}

// Carrier Documents
model CarrierDocument {
  id           Int      @id @default(autoincrement())
  carrierId    Int
  documentType String
  filename     String
  filePath     String
  uploadedAt   DateTime @default(now())

  // Relations
  carrier      Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)

  @@map("carrier_documents")
}

// Invoice model
model Invoice {
  id            Int           @id @default(autoincrement())
  bookingId     Int           @unique
  invoiceNumber String        @unique
  amount        Decimal       @db.Decimal(8, 2)
  status        InvoiceStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  paidAt        DateTime?

  // Relations
  booking       Booking       @relation(fields: [bookingId], references: [id])

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}