generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int              @id @default(autoincrement())
  email                 String           @unique
  password              String
  name                  String
  role                  UserRole         @default(USER)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  systemSettingsUpdates SystemSettings[]
  createdLineItems       BookingLineItem[]

  @@map("users")
}

model Carrier {
  id                  Int                     @id @default(autoincrement())
  name                String
  contactPerson       String?
  phone               String?
  email               String?
  mcNumber            String?                 @unique
  dotNumber           String?                 @unique
  insuranceExpiration DateTime?
  status              CarrierStatus           @default(PENDING)
  rating              Decimal?                @db.Decimal(2, 1)
  ratePerMile         Decimal?                @db.Decimal(5, 2)
  onboardingComplete  Boolean                 @default(false)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  carrierType         String?
  city                String?
  factoringCompany    String?
  remittanceContact   String?
  remittanceEmail     String?
  safetyRating        String?
  state               String?
  streetAddress1      String?
  streetAddress2      String?
  taxId               String?
  zipCode             String?
  bookings            Booking[]
  documents           CarrierDocument[]
  preferredRoutes     CarrierPreferredRoute[]
  drivers             CarrierDriver[]

  @@map("carriers")
}

model Route {
  id                   Int                     @id @default(autoincrement())
  name                 String
  origin               String
  destination          String
  distance             Decimal                 @db.Decimal(6, 1)
  standardRate         Decimal?                @db.Decimal(5, 2)
  frequency            String?
  departureTime        String?
  arrivalTime          String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  active               Boolean                 @default(true)
  destinationAddress   String?
  destinationCity      String?
  destinationContact   String?
  destinationState     String?
  destinationZipCode   String?
  originAddress        String?
  originCity           String?
  originContact        String?
  originState          String?
  originZipCode        String?
  runTime              Int?
  destinationLatitude  Decimal?                @db.Decimal(10, 7)
  destinationLongitude Decimal?                @db.Decimal(10, 7)
  destinationTimeZone  String?
  originLatitude       Decimal?                @db.Decimal(10, 7)
  originLongitude      Decimal?                @db.Decimal(10, 7)
  originTimeZone       String?
  bookings             Booking[]
  preferredBy          CarrierPreferredRoute[]

  @@map("routes")
}

model SystemSettings {
  id                Int      @id @default(autoincrement())
  fuelSurchargeRate Decimal  @default(0.00) @db.Decimal(5, 2)
  updatedAt         DateTime @updatedAt
  updatedBy         Int?
  updatedByUser     User?    @relation(fields: [updatedBy], references: [id])

  @@map("system_settings")
}

model Booking {
  id                    Int           @id @default(autoincrement())
  carrierId             Int?
  routeId               Int?
  bookingDate           DateTime
  rate                  Decimal       @db.Decimal(8, 2)
  status                BookingStatus @default(PENDING)
  billable              Boolean       @default(false)
  notes                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  bookingGroupId        String?
  isParent              Boolean       @default(true)
  legNumber             Int           @default(1)
  parentBookingId       Int?
  baseRate              Decimal?      @db.Decimal(8, 2)
  fscRate               Decimal?      @db.Decimal(5, 2)
  rateType              RateType      @default(FLAT_RATE)
  driverName            String?
  phoneNumber           String?
  trailerLength         Int?
  type                  BookingType   @default(POWER_ONLY)
  carrierEmail          String?
  carrierReportTime     String?
  confirmationIpAddress String?
  confirmationSentAt    DateTime?
  confirmationSentVia   String?
  confirmationSignature String?
  confirmationSignedAt  DateTime?
  confirmationSignedBy  String?
  confirmationToken     String?       @unique
  signedPdfPath         String?       // Path to signed PDF file
  
  // Origin-destination booking fields
  origin                String?
  destination           String?
  estimatedMiles        Decimal?      @db.Decimal(6, 1)
  manifestNumber        String?       // For load completion workflow
  
  // Route information fields for custom bookings
  routeName             String?
  routeFrequency        String?
  routeStandardRate     Decimal?      @db.Decimal(8, 2)
  routeRunTime          Int?
  
  // Origin details
  originAddress         String?
  originCity            String?
  originState           String?
  originZipCode         String?
  originContact         String?
  originTimeZone        String?
  originLatitude        Decimal?      @db.Decimal(10, 7)
  originLongitude       Decimal?      @db.Decimal(10, 7)
  
  // Destination details
  destinationAddress    String?
  destinationCity       String?
  destinationState      String?
  destinationZipCode    String?
  destinationContact    String?
  destinationTimeZone   String?
  destinationLatitude   Decimal?      @db.Decimal(10, 7)
  destinationLongitude  Decimal?      @db.Decimal(10, 7)
  
  // Time fields
  departureTime         String?
  arrivalTime           String?
  
  // Multi-leg time arrays (JSON stored as strings)
  legDepartureTimes     String?   // JSON array: ["18:00", "02:30"] 
  legArrivalTimes       String?   // JSON array: ["04:45", "11:15"]
  
  carrier               Carrier?      @relation(fields: [carrierId], references: [id])
  parentBooking         Booking?      @relation("BookingLegs", fields: [parentBookingId], references: [id])
  childBookings         Booking[]     @relation("BookingLegs")
  route                 Route?        @relation(fields: [routeId], references: [id])
  invoice               Invoice?
  lineItems             BookingLineItem[]

  @@map("bookings")
}

model BookingLineItem {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  category    String   // e.g., "fuel_surcharge", "detention", "additional_stops", "lumper_fee", "custom"
  description String
  amount      Decimal  @db.Decimal(8, 2)
  quantity    Int      @default(1)
  unitPrice   Decimal? @db.Decimal(8, 2) // For quantity-based charges
  receiptPath String?  // Path to uploaded receipt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int?     // User who added this line item
  
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  creator     User?    @relation(fields: [createdBy], references: [id])
  
  @@map("booking_line_items")
}

model CarrierPreferredRoute {
  carrierId Int
  routeId   Int
  carrier   Carrier @relation(fields: [carrierId], references: [id], onDelete: Cascade)
  route     Route   @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@id([carrierId, routeId])
  @@map("carrier_preferred_routes")
}

model CarrierDocument {
  id           Int      @id @default(autoincrement())
  carrierId    Int
  documentType String
  filename     String
  filePath     String
  uploadedAt   DateTime @default(now())
  carrier      Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)

  @@map("carrier_documents")
}

model CarrierDriver {
  id          Int      @id @default(autoincrement())
  carrierId   Int
  name        String
  number      String?  // Driver number for dispatch
  phoneNumber String?
  email       String?
  licenseNumber String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  carrier     Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)

  @@map("carrier_drivers")
}

model Invoice {
  id            Int           @id @default(autoincrement())
  bookingId     Int           @unique
  invoiceNumber String        @unique
  amount        Decimal       @db.Decimal(8, 2)
  status        InvoiceStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  paidAt        DateTime?
  booking       Booking       @relation(fields: [bookingId], references: [id])

  @@map("invoices")
}

model Location {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  contact   String?
  phone     String?
  hours     String?
  timeZone  String?
  latitude  Decimal? @db.Decimal(10, 7)
  longitude Decimal? @db.Decimal(10, 7)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

enum UserRole {
  ADMIN
  DISPATCHER
  USER
  CARRIER
}

enum CarrierStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  NOT_ONBOARDED
  ONBOARDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RateType {
  MILE
  MILE_FSC
  FLAT_RATE
}

enum BookingType {
  POWER_ONLY
  POWER_AND_TRAILER
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}
